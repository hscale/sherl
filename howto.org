* What we are trying to do here
* Create some project directories
#+BEGIN_SRC sh-mode
mkdir shurl
cd shurl
mkdir -p lib/shurl
cd lib/shurl && mkdir ebin include src test
#+END_SRC
* Install erl_rake

1. Grab a copy of the erl_rake git repo:
    : git clone git://github.com/charpi/erl_rake.git

2. Copy erl_rake/Rakefile and erl_rake/rakelib to

#+BEGIN_SRC sh-mode
cd sherl # top-level project dir, not sherl/lib/sherl
cp -r ERL_RAKE_HOME/Rakefile ERL_RAKE_HOME/rakelib .
rake -T
## now edit erlang_config.rb for your environment
## now rake -T should give you a list of tasks
#+END_SRC



* Creating sherl_db
sherl_db is the module that knows how to store and retrieve URL data
and interfaces with the mnesia database system.

** Defining the records
We'll use two records in our system, one to represent the URL data and
one that will be used to obtain a sequence of integers.
*** The url record (sherl/include/sherl_url.hrl)
The url record has the following fields:
- code :: The integer representing this URL, this is, in effect, the
  shortened form.
- url :: The URL
- created :: a timestamp indicating when the shortened URL entered the
  system.
- count :: a count of the number of times this URL has been redirected
  to from within the system.
- last_access :: a timestamp indicating the last time the system
  issued a redirect for this URL.
*** The counter record (sherl/include/sherl_counter.hrl)
We define a counter record in a separate include file because while we
might want to share the URL record definition, this record is purely
implementation detail.
- id :: this is the global counter that we use as the sequence of
  integers for shortening URLs.
- ver :: this is really a dummy field that is needed because you can't
  have records with a single column.  See the mnesia docs for
  create_table for details.


1. Edit sherl/lib/sherl/src/sherl_db.erl

** Getting to some code
We start with an outline for the module, defining stub methods for
put_url/1 and get_url/1.
